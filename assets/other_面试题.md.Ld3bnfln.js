import{_ as a,c as s,o as l,ag as e}from"./chunks/framework.DYxeFYSt.js";const c=JSON.parse('{"title":"面试题","description":"","frontmatter":{},"headers":[],"relativePath":"other/面试题.md","filePath":"other/面试题.md"}'),n={name:"other/面试题.md"};function t(h,i,r,p,o,d){return l(),s("div",null,i[0]||(i[0]=[e(`<h1 id="面试题" tabindex="-1">面试题 <a class="header-anchor" href="#面试题" aria-label="Permalink to &quot;面试题&quot;">​</a></h1><h2 id="_1-vue-的双向绑定" tabindex="-1">1. Vue 的双向绑定 <a class="header-anchor" href="#_1-vue-的双向绑定" aria-label="Permalink to &quot;1. Vue 的双向绑定&quot;">​</a></h2><p>​  使用发布订阅模式将数据劫持和模板编译相结合</p><ol><li>数据监视器，能对数据对象的所有属性进行监听</li><li>指令解释器，对每个元素节点进行解析，根据指令模板替换数据，以及绑定相对应的更新函数</li><li>观察者，作为数据监视器和指令解释器的桥梁，能够订阅并通过订阅者收到每个属性变动的通知，执行指令绑定的回调函数，从而更新视图。</li><li>订阅者，管理数据的订阅者，当数据发生变化之后，通知观察者来更新视图</li></ol><h2 id="_2-跨域的解决方案" tabindex="-1">2. 跨域的解决方案 <a class="header-anchor" href="#_2-跨域的解决方案" aria-label="Permalink to &quot;2. 跨域的解决方案&quot;">​</a></h2><ol><li>配置代理 <ul><li>比如在 vue.config.js 中配置代理服务器/api 转发路径</li><li>创建 jsonp script 标签不受跨域限制</li><li>配置 cros（跨域资源共享） 设置 access-control-allow-origin 允许跨域</li></ul></li></ol><h2 id="_3-三栏布局" tabindex="-1">3. 三栏布局 <a class="header-anchor" href="#_3-三栏布局" aria-label="Permalink to &quot;3. 三栏布局&quot;">​</a></h2><ol><li>float 流体布局 <ul><li>左侧 float left 右侧 float right 中间 margin-left margin-right</li></ul></li><li>flex 布局 <ul><li>父级 display:flex 左右侧宽度固定 中间 flex:1</li></ul></li></ol><h2 id="_4-es6-api" tabindex="-1">4. ES6 API <a class="header-anchor" href="#_4-es6-api" aria-label="Permalink to &quot;4. ES6 API&quot;">​</a></h2><ol><li>新增 let const 常量</li><li>symbol 唯一的值</li><li>模板字符串</li><li>结构表达式</li><li>Set 类似数组 里面的值是唯一的</li><li>Map 保存键值对</li><li>数组的新方法 <ul><li>forEach</li><li>map</li><li>filter</li><li>Array.from</li><li>includes</li></ul></li><li>对象的新方法 <ul><li>object.assgin</li><li>object.keys</li><li>object.values</li></ul></li><li>箭头函数</li><li>扩展运算符</li></ol><h2 id="_5-性能优化" tabindex="-1">5. 性能优化 <a class="header-anchor" href="#_5-性能优化" aria-label="Permalink to &quot;5. 性能优化&quot;">​</a></h2><ol><li>合并减少 http 请求数量</li><li>将 js 脚本放底部</li><li>可以设置 script 标签设置 defer 属性</li><li>压缩图片体积</li><li>使用 cdn 更快速的下载静态资源</li><li>webpack 工具</li></ol><h2 id="_6-ts-里怎么定义接口-定义之后怎么用" tabindex="-1">6. ts 里怎么定义接口，定义之后怎么用 <a class="header-anchor" href="#_6-ts-里怎么定义接口-定义之后怎么用" aria-label="Permalink to &quot;6. ts 里怎么定义接口，定义之后怎么用&quot;">​</a></h2><p>示例：</p><div class="language-tsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Person</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  id</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  age</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> person</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Person</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  id: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;tom&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  age: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">20</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div><h2 id="_7-v-model-原理" tabindex="-1">7. v-model 原理 <a class="header-anchor" href="#_7-v-model-原理" aria-label="Permalink to &quot;7. v-model 原理&quot;">​</a></h2><p>​ 本质是语法糖 等价于 v-bind 绑定属性的值 及 v-on 绑定 input 事件 监听 input 事件的输入 调用 defineproperty 方法 来修改属性的值</p><h2 id="_8-vue3-父组件和子组件的传值过程" tabindex="-1">8. Vue3 父组件和子组件的传值过程 <a class="header-anchor" href="#_8-vue3-父组件和子组件的传值过程" aria-label="Permalink to &quot;8. Vue3 父组件和子组件的传值过程&quot;">​</a></h2><h2 id="_9-vue3-子组件怎么向父组件传递数据" tabindex="-1">9. Vue3 子组件怎么向父组件传递数据 <a class="header-anchor" href="#_9-vue3-子组件怎么向父组件传递数据" aria-label="Permalink to &quot;9. Vue3 子组件怎么向父组件传递数据&quot;">​</a></h2><h2 id="_10-说一下-v-if-和-v-show-的区别" tabindex="-1">10. 说一下 v-if 和 v-show 的区别 <a class="header-anchor" href="#_10-说一下-v-if-和-v-show-的区别" aria-label="Permalink to &quot;10. 说一下 v-if 和 v-show 的区别&quot;">​</a></h2><p><code>v-if</code> 是动态的向 DOM 树内添加或者删除 DOM 元素</p><p><code>v-show</code> 是通过设置 DOM 元素的 display 样式属性控制显隐</p><h2 id="_11-vue3-的生命周期" tabindex="-1">11. vue3 的生命周期 <a class="header-anchor" href="#_11-vue3-的生命周期" aria-label="Permalink to &quot;11. vue3 的生命周期&quot;">​</a></h2><h2 id="_12-vue3-的双向数据绑定原理" tabindex="-1">12. vue3 的双向数据绑定原理 <a class="header-anchor" href="#_12-vue3-的双向数据绑定原理" aria-label="Permalink to &quot;12. vue3 的双向数据绑定原理&quot;">​</a></h2><p>  vue3 是通过 es6 中的 proxyApi 对数据劫持 能劫持整个对象 而 defineproperty 只能只能监听某个属性 省去遍历 提高性能 proxy 能够直接监听数组下标的修改</p><h2 id="_13-style-标签上加了-scoped-属性后怎么做样式穿透" tabindex="-1">13. style 标签上加了 scoped 属性后怎么做样式穿透 <a class="header-anchor" href="#_13-style-标签上加了-scoped-属性后怎么做样式穿透" aria-label="Permalink to &quot;13. style 标签上加了 scoped 属性后怎么做样式穿透&quot;">​</a></h2><p><code>::v-deep</code> ，<code>:v-deep()</code></p><h2 id="_14-熟不熟-ts-vue3-vue2-cesium-echarts-写代码风格-祖孙通信-父子通信" tabindex="-1">14.熟不熟 ts，vue3,vue2，cesium，echarts，写代码风格，祖孙通信，父子通信 <a class="header-anchor" href="#_14-熟不熟-ts-vue3-vue2-cesium-echarts-写代码风格-祖孙通信-父子通信" aria-label="Permalink to &quot;14.熟不熟 ts，vue3,vue2，cesium，echarts，写代码风格，祖孙通信，父子通信&quot;">​</a></h2><p>​</p>`,29)]))}const u=a(n,[["render",t]]);export{c as __pageData,u as default};
