import{_ as i,c as a,o as n,ag as t}from"./chunks/framework.DYxeFYSt.js";const g=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"articles/uniapp/uniapp 登陆后从 login 页面跳转到 tabBar 页面不触发 tabBar 页面生命周期.md","filePath":"articles/uniapp/uniapp 登陆后从 login 页面跳转到 tabBar 页面不触发 tabBar 页面生命周期.md"}'),p={name:"articles/uniapp/uniapp 登陆后从 login 页面跳转到 tabBar 页面不触发 tabBar 页面生命周期.md"};function e(h,s,l,k,r,d){return n(),a("div",null,s[0]||(s[0]=[t(`<h2 id="uniapp-登陆后从-login-页面跳转到-tabbar-页面不触发-tabbar-页面生命周期" tabindex="-1">uniapp 登陆后从 login 页面跳转到 tabBar 页面不触发 tabBar 页面生命周期 <a class="header-anchor" href="#uniapp-登陆后从-login-页面跳转到-tabbar-页面不触发-tabbar-页面生命周期" aria-label="Permalink to &quot;uniapp 登陆后从 login 页面跳转到 tabBar 页面不触发 tabBar 页面生命周期&quot;">​</a></h2><h3 id="如果更新多个页面则采用以下方法" tabindex="-1">如果更新多个页面则采用以下方法 <a class="header-anchor" href="#如果更新多个页面则采用以下方法" aria-label="Permalink to &quot;如果更新多个页面则采用以下方法&quot;">​</a></h3><br> uniapp 登陆后从\`login页面\`跳转到 \`tabBar 页面\`不触发 \`tabBar 页面\`生命周期 <p>在使用 uniapp 开发微信小程序项目遇到个问题，<code>在用户退出登录时清除本地所有缓存之后，跳转到 login 页面</code>，再使用其他账号登录后，使用 <code>uni.switchTab()</code>跳转回 <code>tabBar 页面</code>时，不会触发页面的生命周期，<code>导致页面数据还是显示上个账号的数据</code>，不会重新加载。</p><p>后来发现在 <code>tabBar 页面</code>中并 <code>不会每次切换或显示都会触发页面的 onLoad。</code> 在网上查到的大部分方法都是使用 <code> getCurrentPages()</code>获取到页面栈的实例</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> pages</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getCurrentPages</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> perpage</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> pages[pages.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">perpage.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">onLoad</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre></div><p>但是实际使用会发现，这种做法仅适用于更新上个页面的数据，如果我有多个 tabBar 页面是无法触发所有页面的 onLoad() 于是改为如下代码</p><p><strong>在登录成功的回调中</strong></p><p><code>uni.$emit(eventName,OBJECT)</code>：触发全局的自定义事件，附加参数都会传给监听器回调函数 <code>uni.$on(eventName,callback)</code>：监听全局的自定义事件，事件由 uni.$emit 触发，回调函数会接收事件触发函数的传入参数。</p><p><strong>在所有的 tabBar 页面的 <code>onLoad</code>中</strong></p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">onLoad</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">load</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//在load中调用初始化需要的方法</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	uni.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$on</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;loginSuccess&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">res</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">		this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">load</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//监听到登录成功之后重新初始化(任何页面执行 uni.$emit(&quot;loginSuccess&quot;, true) 后会就触发)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	})</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">},</span></span></code></pre></div><br><p>附博客原文网址：<a href="https://blog.csdn.net/weixin_45488891/article/details/127417668" target="_blank" rel="noreferrer">uniapp 登陆后从 login 页面跳转到 tabBar 页面不触发 tabBar 页面生命周期</a></p><h3 id="如果只是更新一个页面则采用以下方法" tabindex="-1">如果只是更新一个页面则采用以下方法 <a class="header-anchor" href="#如果只是更新一个页面则采用以下方法" aria-label="Permalink to &quot;如果只是更新一个页面则采用以下方法&quot;">​</a></h3><br><ol><li>利用 <code>reLaunch</code> 跳转页面<code>&lt;br&gt;</code> wx.reLaunch（）：关闭所有页面，打开到应用内的某个页面，会执行 onLoad 操作</li><li>使用页面栈 <code>getCurrentPages()</code> 附：<a href="https://uniapp.dcloud.net.cn/uni-app-x/api/get-current-pages.html#getcurrentpages" target="_blank" rel="noreferrer">uniapp 文档</a></li></ol><p><code>示例</code>：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">uni.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">switchTab</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  url: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/pages/index/index&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  success</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">res</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> page </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getCurrentPages</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pop</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (page </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> undefined</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ||</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> page </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    page.curSegment </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    page.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">onLoad</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div>`,19)]))}const o=i(p,[["render",e]]);export{g as __pageData,o as default};
